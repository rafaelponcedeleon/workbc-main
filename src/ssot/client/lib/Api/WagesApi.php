<?php
/**
 * WagesApi
 * PHP version 7.3
 *
 * @category Class
 * @package  WorkBC\SSoT
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PostgREST API
 *
 * standard public schema
 *
 * The version of the OpenAPI document: 9.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WorkBC\SSoT\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WorkBC\SSoT\ApiException;
use WorkBC\SSoT\Configuration;
use WorkBC\SSoT\HeaderSelector;
use WorkBC\SSoT\ObjectSerializer;

/**
 * WagesApi Class Doc Comment
 *
 * @category Class
 * @package  WorkBC\SSoT
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation wagesDelete
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function wagesDelete($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null)
    {
        $this->wagesDeleteWithHttpInfo($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer);
    }

    /**
     * Operation wagesDeleteWithHttpInfo
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function wagesDeleteWithHttpInfo($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null)
    {
        $request = $this->wagesDeleteRequest($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation wagesDeleteAsync
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesDeleteAsync($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null)
    {
        return $this->wagesDeleteAsyncWithHttpInfo($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wagesDeleteAsyncWithHttpInfo
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesDeleteAsyncWithHttpInfo($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null)
    {
        $returnType = '';
        $request = $this->wagesDeleteRequest($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wagesDelete'
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function wagesDeleteRequest($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null)
    {

        $resourcePath = '/wages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($noc)) {
            $noc = ObjectSerializer::serializeCollection($noc, '', true);
        }
        if ($noc !== null) {
            $queryParams['noc'] = $noc;
        }
        // query params
        if (is_array($occupation_title)) {
            $occupation_title = ObjectSerializer::serializeCollection($occupation_title, '', true);
        }
        if ($occupation_title !== null) {
            $queryParams['occupation_title'] = $occupation_title;
        }
        // query params
        if (is_array($esdc_wage_rate_low_2021)) {
            $esdc_wage_rate_low_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_low_2021, '', true);
        }
        if ($esdc_wage_rate_low_2021 !== null) {
            $queryParams['esdc_wage_rate_low_2021'] = $esdc_wage_rate_low_2021;
        }
        // query params
        if (is_array($esdc_wage_rate_median_2021)) {
            $esdc_wage_rate_median_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_median_2021, '', true);
        }
        if ($esdc_wage_rate_median_2021 !== null) {
            $queryParams['esdc_wage_rate_median_2021'] = $esdc_wage_rate_median_2021;
        }
        // query params
        if (is_array($esdc_wage_rate_high_2021)) {
            $esdc_wage_rate_high_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_high_2021, '', true);
        }
        if ($esdc_wage_rate_high_2021 !== null) {
            $queryParams['esdc_wage_rate_high_2021'] = $esdc_wage_rate_high_2021;
        }
        // query params
        if (is_array($calculated_median_annual_salary_2021)) {
            $calculated_median_annual_salary_2021 = ObjectSerializer::serializeCollection($calculated_median_annual_salary_2021, '', true);
        }
        if ($calculated_median_annual_salary_2021 !== null) {
            $queryParams['calculated_median_annual_salary_2021'] = $calculated_median_annual_salary_2021;
        }
        // query params
        if (is_array($source_information)) {
            $source_information = ObjectSerializer::serializeCollection($source_information, '', true);
        }
        if ($source_information !== null) {
            $queryParams['source_information'] = $source_information;
        }

        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wagesGet
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $select Filtering Columns (optional)
     * @param  string $order Ordering (optional)
     * @param  string $range Limiting and Pagination (optional)
     * @param  string $range_unit Limiting and Pagination (optional, default to 'items')
     * @param  string $offset Limiting and Pagination (optional)
     * @param  string $limit Limiting and Pagination (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WorkBC\SSoT\Model\Wages[]
     */
    public function wagesGet($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $select = null, $order = null, $range = null, $range_unit = 'items', $offset = null, $limit = null, $prefer = null)
    {
        list($response) = $this->wagesGetWithHttpInfo($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $select, $order, $range, $range_unit, $offset, $limit, $prefer);
        return $response;
    }

    /**
     * Operation wagesGetWithHttpInfo
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $select Filtering Columns (optional)
     * @param  string $order Ordering (optional)
     * @param  string $range Limiting and Pagination (optional)
     * @param  string $range_unit Limiting and Pagination (optional, default to 'items')
     * @param  string $offset Limiting and Pagination (optional)
     * @param  string $limit Limiting and Pagination (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WorkBC\SSoT\Model\Wages[], HTTP status code, HTTP response headers (array of strings)
     */
    public function wagesGetWithHttpInfo($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $select = null, $order = null, $range = null, $range_unit = 'items', $offset = null, $limit = null, $prefer = null)
    {
        $request = $this->wagesGetRequest($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $select, $order, $range, $range_unit, $offset, $limit, $prefer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WorkBC\SSoT\Model\Wages[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WorkBC\SSoT\Model\Wages[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WorkBC\SSoT\Model\Wages[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WorkBC\SSoT\Model\Wages[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wagesGetAsync
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $select Filtering Columns (optional)
     * @param  string $order Ordering (optional)
     * @param  string $range Limiting and Pagination (optional)
     * @param  string $range_unit Limiting and Pagination (optional, default to 'items')
     * @param  string $offset Limiting and Pagination (optional)
     * @param  string $limit Limiting and Pagination (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesGetAsync($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $select = null, $order = null, $range = null, $range_unit = 'items', $offset = null, $limit = null, $prefer = null)
    {
        return $this->wagesGetAsyncWithHttpInfo($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $select, $order, $range, $range_unit, $offset, $limit, $prefer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wagesGetAsyncWithHttpInfo
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $select Filtering Columns (optional)
     * @param  string $order Ordering (optional)
     * @param  string $range Limiting and Pagination (optional)
     * @param  string $range_unit Limiting and Pagination (optional, default to 'items')
     * @param  string $offset Limiting and Pagination (optional)
     * @param  string $limit Limiting and Pagination (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesGetAsyncWithHttpInfo($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $select = null, $order = null, $range = null, $range_unit = 'items', $offset = null, $limit = null, $prefer = null)
    {
        $returnType = '\WorkBC\SSoT\Model\Wages[]';
        $request = $this->wagesGetRequest($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $select, $order, $range, $range_unit, $offset, $limit, $prefer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wagesGet'
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $select Filtering Columns (optional)
     * @param  string $order Ordering (optional)
     * @param  string $range Limiting and Pagination (optional)
     * @param  string $range_unit Limiting and Pagination (optional, default to 'items')
     * @param  string $offset Limiting and Pagination (optional)
     * @param  string $limit Limiting and Pagination (optional)
     * @param  string $prefer Preference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function wagesGetRequest($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $select = null, $order = null, $range = null, $range_unit = 'items', $offset = null, $limit = null, $prefer = null)
    {

        $resourcePath = '/wages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($noc)) {
            $noc = ObjectSerializer::serializeCollection($noc, '', true);
        }
        if ($noc !== null) {
            $queryParams['noc'] = $noc;
        }
        // query params
        if (is_array($occupation_title)) {
            $occupation_title = ObjectSerializer::serializeCollection($occupation_title, '', true);
        }
        if ($occupation_title !== null) {
            $queryParams['occupation_title'] = $occupation_title;
        }
        // query params
        if (is_array($esdc_wage_rate_low_2021)) {
            $esdc_wage_rate_low_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_low_2021, '', true);
        }
        if ($esdc_wage_rate_low_2021 !== null) {
            $queryParams['esdc_wage_rate_low_2021'] = $esdc_wage_rate_low_2021;
        }
        // query params
        if (is_array($esdc_wage_rate_median_2021)) {
            $esdc_wage_rate_median_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_median_2021, '', true);
        }
        if ($esdc_wage_rate_median_2021 !== null) {
            $queryParams['esdc_wage_rate_median_2021'] = $esdc_wage_rate_median_2021;
        }
        // query params
        if (is_array($esdc_wage_rate_high_2021)) {
            $esdc_wage_rate_high_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_high_2021, '', true);
        }
        if ($esdc_wage_rate_high_2021 !== null) {
            $queryParams['esdc_wage_rate_high_2021'] = $esdc_wage_rate_high_2021;
        }
        // query params
        if (is_array($calculated_median_annual_salary_2021)) {
            $calculated_median_annual_salary_2021 = ObjectSerializer::serializeCollection($calculated_median_annual_salary_2021, '', true);
        }
        if ($calculated_median_annual_salary_2021 !== null) {
            $queryParams['calculated_median_annual_salary_2021'] = $calculated_median_annual_salary_2021;
        }
        // query params
        if (is_array($source_information)) {
            $source_information = ObjectSerializer::serializeCollection($source_information, '', true);
        }
        if ($source_information !== null) {
            $queryParams['source_information'] = $source_information;
        }
        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, '', true);
        }
        if ($select !== null) {
            $queryParams['select'] = $select;
        }
        // query params
        if (is_array($order)) {
            $order = ObjectSerializer::serializeCollection($order, '', true);
        }
        if ($order !== null) {
            $queryParams['order'] = $order;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, '', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }

        // header params
        if ($range !== null) {
            $headerParams['Range'] = ObjectSerializer::toHeaderValue($range);
        }
        // header params
        if ($range_unit !== null) {
            $headerParams['Range-Unit'] = ObjectSerializer::toHeaderValue($range_unit);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.pgrst.object+json', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.pgrst.object+json', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wagesPatch
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function wagesPatch($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null, $wages = null)
    {
        $this->wagesPatchWithHttpInfo($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer, $wages);
    }

    /**
     * Operation wagesPatchWithHttpInfo
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function wagesPatchWithHttpInfo($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null, $wages = null)
    {
        $request = $this->wagesPatchRequest($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer, $wages);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation wagesPatchAsync
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesPatchAsync($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null, $wages = null)
    {
        return $this->wagesPatchAsyncWithHttpInfo($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer, $wages)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wagesPatchAsyncWithHttpInfo
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesPatchAsyncWithHttpInfo($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null, $wages = null)
    {
        $returnType = '';
        $request = $this->wagesPatchRequest($noc, $occupation_title, $esdc_wage_rate_low_2021, $esdc_wage_rate_median_2021, $esdc_wage_rate_high_2021, $calculated_median_annual_salary_2021, $source_information, $prefer, $wages);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wagesPatch'
     *
     * @param  string $noc NOC (optional)
     * @param  string $occupation_title Occupation Title (optional)
     * @param  string $esdc_wage_rate_low_2021 ESDC Wage Rate Low 2021 (optional)
     * @param  string $esdc_wage_rate_median_2021 ESDC Wage Rate Median 2021 (optional)
     * @param  string $esdc_wage_rate_high_2021 ESDC Wage Rate High 2021 (optional)
     * @param  string $calculated_median_annual_salary_2021 Calculated Median Annual Salary  2021 (optional)
     * @param  string $source_information Source Information (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function wagesPatchRequest($noc = null, $occupation_title = null, $esdc_wage_rate_low_2021 = null, $esdc_wage_rate_median_2021 = null, $esdc_wage_rate_high_2021 = null, $calculated_median_annual_salary_2021 = null, $source_information = null, $prefer = null, $wages = null)
    {

        $resourcePath = '/wages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($noc)) {
            $noc = ObjectSerializer::serializeCollection($noc, '', true);
        }
        if ($noc !== null) {
            $queryParams['noc'] = $noc;
        }
        // query params
        if (is_array($occupation_title)) {
            $occupation_title = ObjectSerializer::serializeCollection($occupation_title, '', true);
        }
        if ($occupation_title !== null) {
            $queryParams['occupation_title'] = $occupation_title;
        }
        // query params
        if (is_array($esdc_wage_rate_low_2021)) {
            $esdc_wage_rate_low_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_low_2021, '', true);
        }
        if ($esdc_wage_rate_low_2021 !== null) {
            $queryParams['esdc_wage_rate_low_2021'] = $esdc_wage_rate_low_2021;
        }
        // query params
        if (is_array($esdc_wage_rate_median_2021)) {
            $esdc_wage_rate_median_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_median_2021, '', true);
        }
        if ($esdc_wage_rate_median_2021 !== null) {
            $queryParams['esdc_wage_rate_median_2021'] = $esdc_wage_rate_median_2021;
        }
        // query params
        if (is_array($esdc_wage_rate_high_2021)) {
            $esdc_wage_rate_high_2021 = ObjectSerializer::serializeCollection($esdc_wage_rate_high_2021, '', true);
        }
        if ($esdc_wage_rate_high_2021 !== null) {
            $queryParams['esdc_wage_rate_high_2021'] = $esdc_wage_rate_high_2021;
        }
        // query params
        if (is_array($calculated_median_annual_salary_2021)) {
            $calculated_median_annual_salary_2021 = ObjectSerializer::serializeCollection($calculated_median_annual_salary_2021, '', true);
        }
        if ($calculated_median_annual_salary_2021 !== null) {
            $queryParams['calculated_median_annual_salary_2021'] = $calculated_median_annual_salary_2021;
        }
        // query params
        if (is_array($source_information)) {
            $source_information = ObjectSerializer::serializeCollection($source_information, '', true);
        }
        if ($source_information !== null) {
            $queryParams['source_information'] = $source_information;
        }

        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'application/vnd.pgrst.object+json', 'text/csv']
            );
        }

        // for model (json/xml)
        if (isset($wages)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($wages));
            } else {
                $httpBody = $wages;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wagesPost
     *
     * @param  string $select Filtering Columns (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function wagesPost($select = null, $prefer = null, $wages = null)
    {
        $this->wagesPostWithHttpInfo($select, $prefer, $wages);
    }

    /**
     * Operation wagesPostWithHttpInfo
     *
     * @param  string $select Filtering Columns (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \WorkBC\SSoT\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function wagesPostWithHttpInfo($select = null, $prefer = null, $wages = null)
    {
        $request = $this->wagesPostRequest($select, $prefer, $wages);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation wagesPostAsync
     *
     * @param  string $select Filtering Columns (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesPostAsync($select = null, $prefer = null, $wages = null)
    {
        return $this->wagesPostAsyncWithHttpInfo($select, $prefer, $wages)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wagesPostAsyncWithHttpInfo
     *
     * @param  string $select Filtering Columns (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wagesPostAsyncWithHttpInfo($select = null, $prefer = null, $wages = null)
    {
        $returnType = '';
        $request = $this->wagesPostRequest($select, $prefer, $wages);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wagesPost'
     *
     * @param  string $select Filtering Columns (optional)
     * @param  string $prefer Preference (optional)
     * @param  \WorkBC\SSoT\Model\Wages $wages wages (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function wagesPostRequest($select = null, $prefer = null, $wages = null)
    {

        $resourcePath = '/wages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($select)) {
            $select = ObjectSerializer::serializeCollection($select, '', true);
        }
        if ($select !== null) {
            $queryParams['select'] = $select;
        }

        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'application/vnd.pgrst.object+json', 'text/csv']
            );
        }

        // for model (json/xml)
        if (isset($wages)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($wages));
            } else {
                $httpBody = $wages;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
